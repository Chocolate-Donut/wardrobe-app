/* import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Outfit } from '../outfits/outfit.entity/outfit.entity';
import { User } from '../users/user.entity';
import { Favorite } from '../outfits/favorite.entity';


@Injectable()
export class FavoritesService {
    constructor(
        @InjectRepository(Outfit)
        private outfitsRepository: Repository<Outfit>,
    
        @InjectRepository(Favorite)
        private readonly favoritesRepository: Repository<Favorite>,
      ) {}
      // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –ª–æ–≥–∏–∫—É)
  async addToFavorites(user: User, outfitId: number): Promise<void> {
    const outfit = await this.outfitsRepository.findOne({ where: { id: outfitId } });
    if (!outfit) throw new Error('Outfit not found');
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç outfit –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const alreadyFavorited = await this.favoritesRepository.findOne({
      where: { user: { id: user.id }, outfit: { id: outfitId } },
    });
  
    if (alreadyFavorited) {
      throw new Error('Outfit already in favorites');
    }
  
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å userId
    const favorite = this.favoritesRepository.create({
      user: user, // üëà –ó–¥–µ—Å—å —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è user
      outfit: outfit,
    });
  
    await this.favoritesRepository.save(favorite);
  
    outfit.favoritesCount += 1;
    await this.outfitsRepository.save(outfit);

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö)
    outfit.rating += 1;
    await this.outfitsRepository.save(outfit);
  }
  
  //—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±

  async removeFromFavorites(user: User, outfitId: number): Promise<void> {
    const outfit = await this.outfitsRepository.findOne({ where: { id: outfitId } });

    if (!outfit) {
        throw new NotFoundException('‚ùå –û–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }

    const favorite = await this.favoritesRepository.findOne({ 
        where: { user: { id: user.id }, outfit: { id: outfitId } } 
    });

    if (!favorite) {
        throw new NotFoundException('‚ùå –≠—Ç–æ—Ç –æ–±—Ä–∞–∑ –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!');
    }

    await this.favoritesRepository.delete({ user: { id: user.id }, outfit: { id: outfitId } });

    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    outfit.favoritesCount = Math.max(0, outfit.favoritesCount - 1);

    // –£–º–µ–Ω—å—à–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–æ –Ω–µ –Ω–∏–∂–µ 0)
    outfit.rating = Math.max(0, outfit.rating - 1);
    
    await this.outfitsRepository.save(outfit);
}

  //–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–∑–± –æ–±—Ä–∞–∑—ã
  async getUserFavorites(user: User): Promise<Outfit[]> {
    const favorites = await this.favoritesRepository.find({ where: { user: { id: user.id } }, relations: ['outfit'] });
    return favorites.map(fav => fav.outfit);
  }
}

 */

import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Favorite } from '../outfits/favorite.entity';
//import { Outfit } from '../outfits/outfit.entity.outfit';
import { User } from '../users/user.entity';
import { Outfit } from '../outfits/outfit.entity/outfit.entity';

@Injectable()
export class FavoritesService {
  constructor(
    @InjectRepository(Favorite)
    private readonly favoriteRepository: Repository<Favorite>,
    @InjectRepository(Outfit)
    private readonly outfitRepository: Repository<Outfit>,
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
  ) {}

  async addToFavorites(userId: number, outfitId: number) {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const outfit = await this.outfitRepository.findOne({ where: { id: outfitId } });
    if (!outfit) {
      throw new NotFoundException('–û–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const exists = await this.favoriteRepository.findOne({
      where: { user: { id: userId }, outfit: { id: outfitId } },
    });

    if (exists) {
      throw new Error('–≠—Ç–æ—Ç –æ–±—Ä–∞–∑ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!');
    }

    const favorite = this.favoriteRepository.create({ user, outfit });
    return this.favoriteRepository.save(favorite);
  }

  async removeFromFavorites(userId: number, outfitId: number) {
    const result = await this.favoriteRepository.delete({
      user: { id: userId },
      outfit: { id: outfitId },
    });

    if (result.affected === 0) {
      throw new NotFoundException('–û–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
    }

    return { message: '–û–±—Ä–∞–∑ —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' };
  }

  async getUserFavorites(userId: number) {
    return this.favoriteRepository.find({
      where: { user: { id: userId } },
      relations: ['outfit'],
      select: ['id', 'outfit'],
    });
  }
}

