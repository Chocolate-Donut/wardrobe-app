import { Controller, Get, Query, UseGuards} from '@nestjs/common';
import { FeedService } from './feed.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { GetUser } from '../auth/get-user.decorator';
import { User } from '../users/user.entity';

@Controller('feed')
export class FeedController {
    constructor(private readonly feedService: FeedService) {}

    // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ 20 –æ–±—Ä–∞–∑–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    @Get('public')
    getPublicOutfits() {
      return this.feedService.getPublicOutfits();
    }

    //–ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã
    @Get()
    async getFilteredOutfits(
        @Query('season') season?: string,
        @Query('tags') tags?: string,
        @Query('trend') trend?: string,
    ) {
        console.log('üî•üî•üî• –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—ã–∑–≤–∞–Ω!'); // –¢–ï–°–¢–û–í–´–ô –õ–û–ì
        console.log('üî• –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–ª—É—á–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { season, tags, trend }); // –õ–û–ì –î–õ–Ø –ü–†–û–í–ï–†–ö–ò

        return this.feedService.getFilteredOutfits(season, tags, trend);
    }

    //–ü–æ–∏—Å–∫
    @UseGuards(JwtAuthGuard)
    @Get('search')
    async searchOutfits(@Query('query') query: string) {
    console.log(`üî• –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫: ${query}`);
    return this.feedService.searchOutfits(query);
    }
    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –ø–æ —Ü–≤–µ—Ç–∞–º
    @UseGuards(JwtAuthGuard)
    @Get('search-by-color')
    async searchByColor(@Query('palette') palette: string) {
    let parsedPalette: string[];

    try {
        // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ JSON
        parsedPalette = JSON.parse(palette);
    } catch (error) {
        throw new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–∞–ª–∏—Ç—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –º–∞—Å—Å–∏–≤.');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(parsedPalette)) {
        throw new Error('–ü–∞–ª–∏—Ç—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }

    if (parsedPalette.length === 0) {
        throw new Error('–ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!');
    }

    return this.feedService.searchByColor(parsedPalette);
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–µ
    @Get('recommended')
    async getRecommendedOutfits(@Query('city') city?: string) {
        return this.feedService.getRecommendedOutfits(city);
    }

}